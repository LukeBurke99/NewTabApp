@page "/"
@inject JsConsoleService _log
@inject ProtectedLocalStorage _browserStorage
@inject BookmarkService _bookmarkService
@inject NavigationManager _navManager


<div class="container">

    <div class="input-group mb-3">
        <input autofocus type="text" class="form-control border-secondary border-end-0 rounded-0" placeholder="Google search...">
        <button class="btn border border-secondary border-start-0 rounded-0" type="button">
            <Search />
        </button>
    </div>


    @if (Bookmarks?.Children != null) {
        const int itemsInRow = 9;
        var rows = (int)Math.Ceiling((double)Bookmarks.Children.Count / itemsInRow);
        var counter = 0;

        for (var row = 0; row < rows; row++) {
            var tempItemsInRow = itemsInRow;
            <div class="row text-center">
                @for (var column = 0; column < tempItemsInRow; column++) {

                    if (BookmarkStack.Count > 1 && row == 0 && column == 0) {
                        rows = (int)Math.Ceiling(((double)Bookmarks.Children.Count + 1) / itemsInRow);
                        tempItemsInRow--;
                        <div class="col">
                            <BookmarkItem UpdateBookmarksEvent="ShowFolder" FolderUp="true" />
                        </div>
                    }

                    <div class="col">
                        @if (counter < Bookmarks.Children.Count) {
                            <BookmarkItem Bookmark="Bookmarks.Children[counter]" UpdateBookmarksEvent="ShowFolder" />
                        }
                    </div>

                    counter++;
                }
            </div>
        }
    }


</div>


@code {

    private Bookmark? Bookmarks { get; set; }
    private Stack<Bookmark> BookmarkStack { get; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var bookmarksFile = await _browserStorage.GetAsync<string>("BookmarkPath");
            if (string.IsNullOrEmpty(bookmarksFile.Value))
                _navManager.NavigateTo(@Routes.Settings);
            else 
                await GetBookmarksAsync(bookmarksFile.Value);
        }
    }


    private async Task GetBookmarksAsync(string bookmarkFileLocation)
    {
        Bookmarks = await _bookmarkService.GetBookmarksAsync(bookmarkFileLocation);
        if (Bookmarks != null) {
            ShowFolder(Bookmarks);
        }
        await _log.LogToConsole(Bookmarks);
    }


    private void ShowFolder(Bookmark? folder)
    {
        if (folder == null) {
            BookmarkStack.Pop();
            folder = BookmarkStack.Peek();
        } else {
            BookmarkStack.Push(folder);
        }

        Bookmarks = folder;
        Bookmarks.Children = Bookmarks.Children?.OrderBy(x => x.Type).ToList();
        StateHasChanged();
    }
}