@using NewTab.Web.Services
@using NewTab.Web.Models
@inject JsConsoleService _log
@inject BookmarkService _bookmarkService
@page "/"


<div class="container">

    <div class="input-group mb-3">
        <input type="text" class="form-control border-secondary border-end-0 rounded-0" placeholder="Google search...">
        <button class="btn border border-secondary border-start-0 rounded-0" type="button">
            <Search />
        </button>
    </div>
    

    @if (Bookmarks?.Children != null) {
        const int itemsInRow = 9;
        var rows = (int)Math.Ceiling((double)Bookmarks.Children.Count / itemsInRow);
        var counter = 0;
        for (var row = 0; row < rows; row++) {
            var tempItemsInRow = itemsInRow;
            <div class="row text-center">
                @for (var column = 0; column < tempItemsInRow; column++) {

                    if (BookmarkStack.Count > 1 && row == 0 && column == 0) {
                        rows = (int) Math.Ceiling(((double) Bookmarks.Children.Count + 1) / itemsInRow);
                        tempItemsInRow--;
                        <div class="col"><div class="bg-primary py-5 text-white" @onclick="() => ShowFolder(null)">Folder Up</div></div>
                    }

                    if (counter >= Bookmarks.Children.Count) {
                        <div class="col"><div class="bg-danger py-5 text-white">&nbsp;</div></div>
                    } else {
                        var bookmark = Bookmarks.Children[counter];
                        <div class="col">
                            @if (bookmark.Type == "folder") {
                                <div class="bg-dark py-5 text-white" @onclick="() => ShowFolder(bookmark)">
                                    @bookmark.Name
                                </div>
                            } else {
                                <a class="bg-success py-5 text-white d-block" href="@(bookmark.Url ?? "#")" target="_blank">
                                    @bookmark.Name
                                </a>
                            }
                        </div>
                    }
                    counter++;
                }
            </div>
        }
    }


</div>


@code {

    private Bookmark? Bookmarks { get; set; }
    private Stack<Bookmark> BookmarkStack { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await GetBookmarksAsync();
    }

    private async Task GetBookmarksAsync()
    {
        Bookmarks = await _bookmarkService.GetBookmarksAsync();
        if (Bookmarks != null) {
            ShowFolder(Bookmarks);
        }
        await _log.LogToConsole(Bookmarks);
    }


    private void ShowFolder(Bookmark? folder, bool addToHistory = true)
    {
        if (folder == null) {
            BookmarkStack.Pop();
            ShowFolder(BookmarkStack.Peek(), false);
        } else {
            if (addToHistory)
                BookmarkStack.Push(folder);

            Bookmarks = folder;
            Bookmarks.Children = Bookmarks.Children?.OrderBy(x => x.Type).ToList();
            StateHasChanged();
        }

    }
}